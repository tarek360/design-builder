apply plugin: 'jacoco'

//jacoco {
//  toolVersion = "$jacocoVersion"
//}

tasks.withType(Test) {
  testLogging {
    events "started", "passed", "skipped", "failed"
    exceptionFormat "full"
  }
  jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest'/*, 'createDebugCoverageReport'*/]) {

  reports {
    xml.enabled = true
    html.enabled = true
  }

  def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
  def javaClasses = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
  def kotlinClasses = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
  def javaSrc = "$project.projectDir/src/main/java"
  def kotlinSrc = "$project.projectDir/src/main/kotlin"

  sourceDirectories = files([javaSrc, kotlinSrc])
  classDirectories = files([javaClasses, kotlinClasses])
  executionData = fileTree(dir: project.buildDir,
      includes: ['jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'])
}